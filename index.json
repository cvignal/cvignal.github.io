[{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/","section":"Another tech blog","summary":"","title":"Another tech blog","type":"page"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/dns/","section":"Tags","summary":"","title":"Dns","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/network/","section":"Tags","summary":"","title":"Network","type":"tags"},{"content":"As we all know, network is fun! And what\u0026rsquo;s even funnier in networking you may wonder? DNS of course!\nIn the past few weeks, I\u0026rsquo;ve been changing my LAN network config, starting from DrFrankenstein excellent guides and trying to achieve the following:\nAccessing all my services through a FQDN and not an IP anymore. I\u0026rsquo;ve recently moved out, my ISP changed and my router did meaning I couldn\u0026rsquo;t assign the same static IP to my NAS so I had to change all of my config manually in multiple places, it was a pain Accessing all my services through HTTPS with trusted certificates. I have other users on my network and installing root certificates on all their devices was not an option. As usual when messing with this kind of work, I found myself repeatedly bashing my head against the wall (the wall being nslookup/dig/scutil/any network tool available) for quite a while so I figured I\u0026rsquo;d write a blog post about it if it can help someone in the future.\nPrevious setup # Without going through all the details, this is what the previous setup looked liked: Each service was accessed throught the NAS static IP (setup at the router level) with its port allowed in the firewall. When outside the LAN, we used Tailscale to access the local network, using subnets. There were some issues:\nLots of ports opened in the firewall configuration If the static IP couldn\u0026rsquo;t be attributed anymore (my new router for example), all the config had to be updated manually (docker config, bookmarks, application configurations \u0026hellip;) No HTTPS Not using FQDN is confusing for non technical users who wouldn\u0026rsquo;t remember/bookmark each service with is port. New setup # The two new components are both native Synology tools and can easily be replaced by opensource tools of your choice: the DNS server and the reverse proxy.\nLet\u0026rsquo;s go through the basic flow:\nA client device on the LAN asks the router for a given URI The DNS registered in my router is the one from the NAS The DNS then uses either the forwarders (Quad9/Cloudfare) or the zone linked to the subdomain to retrieve the IP. The reverse proxy then manages the link between the URI and the actual service. HTTPS certificate and domain name # You can skip this section if you\u0026rsquo;re ok with accessing your services using http or if you prefer using a self signed certificate (for a local TLD such as .lan for example).\nIf you want to access your services using HTTPS and an actual domain name that you own, follow along! In this example, we\u0026rsquo;ll use Namecheap as our register for domain name but any registers will do the trick. First, you should delete all the default records for your subdomains in the admin panel for your domain. In order to automatically manage your certificate, you\u0026rsquo;ll need to enable the API access. For Namecheap, it means having \u0026gt; 20 domains or purchasing over 50$ at once. If you don\u0026rsquo;t fill the criteria (like myself), you can still automate the wildcard certificate for your NAS but you\u0026rsquo;ll need to move the DNS hosting to Cloudfare:\nAdd a site with the domain name you purchased on Namecheap On Namecheap, change the domain\u0026rsquo;s nameservers to the two provided by Cloudfare. On Cloudfare, create an API token using the Edit zone DNS template and include your zone. You should then ssh into your NAS and login to the root user, it\u0026rsquo;ll be easier for the next steps.\nInstall acme.sh: $ wget https://github.com/acmesh-official/acme.sh/archive/master.tar.gz $ tar xvf master.tar.gz $ cd acme.sh-master/ $ ./acme.sh --install --nocron --home /usr/local/share/acme.sh --accountemail \u0026#34;email@domain.com\u0026#34; $ source ~/.profile Issue the certificate $ export CF_Token=\u0026#34;your_cloudflare_api_token\u0026#34; $ export CF_Email=\u0026#34;your_cloudflare_email\u0026#34; $ ./acme.sh --issue --home . -d \u0026#34;yourdomain.com\u0026#34; -d \u0026#34;*.yourdomain.com\u0026#34; --dns \u0026#34;dns_cf\u0026#34; Install the certificate and set it as default $ ~/.acme.sh/acme.sh --install-cert -d yourdomain.com \\ --key-file /usr/syno/etc/certificate/system/default/privkey.pem \\ --fullchain-file /usr/syno/etc/certificate/system/default/fullchain.pem \\ --reloadcmd \u0026#34;/usr/syno/sbin/synoservicectl --reload nginx\u0026#34; Add the auto renew via DSM Task Scheduler: create a scheduled task with the following script: /usr/local/share/acme.sh/acme.sh --cron --home /usr/local/share/acme.sh/ If you go into Control Panel \u0026gt; Security \u0026gt; Certificate, you should now see your domain name set as the default certificate.\nDNS configuration # In order to access your services with their names instead of IPs, the first step is to have a local DNS server to resolve them. I\u0026rsquo;ve used the DNS Server from the Synology official packages but you can do this with other DNS servers such as Pi-hole or Technitium.\nFirst, install the package from the package center. Then open it and enable resolution. Enabled forwarders as well and set the DNS servers of your choice (1.1.1.1, 9.9.9.9 \u0026hellip;). Next, create a primary zone with your domain name with you domain name and your NAS ip as the primary DNS server. In this zone, create records for your services as A type resource record. The IP address is always your NAS IP.\nAt this stage, you can try from a device connected to the LAN to resolve one of these services URL:\n$ `nslookup jellyfin.yourdomain.com` and it should return your NAS IP.\nServices and firewall configuration # In order to remove the opened ports from our firewall rules, we\u0026rsquo;ll need to unbind the local access to the services. In their docker-compose files, they should all have their ports set up like this:\n- 8096:8096 Change it to:\n- 127.0.0.1:8096:8096 to forbid access directly from the LAN using the IP. You can then remove your whitelist of ports. Add a new rule allowing access to the port 443 (or 80 if you want to use http) to allow HTTPS traffic.\nGluetun # If you use gluetun with a VPN provider of your choice for some services, you\u0026rsquo;ll need to force it to use Docker DNS in priority adding the following environment variable:\n- DNS_ADDRESS=127.0.0.11 and then change the configuration of these services (if they rely on other services) to use the container name instead of its IP.\nReverse proxy # Finally, go in to Control Panel \u0026gt; Login Portal \u0026gt; Advanced \u0026gt; Reverse Proxy and create your redirections, associating each URL to the correct port. For native applications (such as Synology Photos), you can use the dedicated tab Login Portal \u0026gt; Applications to set a custom domain. Tailscale # To use Tailscale with this setup, you just need to add a split DNS in your admin console with your domain and the Tailscale IP of your NAS. On your client devices, you\u0026rsquo;ll need to enable the DNS in Taiscale to actually use it.\nYou may need to toggle the Override DNS Servers options in the admin console depending on the nature of the devices using your tailnet.\nConclusion # This setup should be more robust than the previous one, it doesn\u0026rsquo;t rely on the IP being always the same (even though you\u0026rsquo;d still need to update it in DNS records if it changes) and allows less technical users a better experience navigating your services. As always when modifyin network config, you might have some issues, I actually had great success using ChatGPT as a debug tool for most of my issues.\n","date":"24 August 2025","externalUrl":null,"permalink":"/posts/tailscale_synology_private_dns/","section":"Posts","summary":"This article explains how to switch from static IPs + ports for your services to FQDN with HTTPS in Synology.","title":"Private DNS with Synology and Tailscale","type":"posts"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/selfhosted/","section":"Tags","summary":"","title":"Selfhosted","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/synology/","section":"Tags","summary":"","title":"Synology","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"24 August 2025","externalUrl":null,"permalink":"/tags/tailscale/","section":"Tags","summary":"","title":"Tailscale","type":"tags"},{"content":"","date":"20 September 2022","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"20 September 2022","externalUrl":null,"permalink":"/categories/elixir/","section":"Categories","summary":"","title":"Elixir","type":"categories"},{"content":"","date":"20 September 2022","externalUrl":null,"permalink":"/tags/elixir/","section":"Tags","summary":"","title":"Elixir","type":"tags"},{"content":"","date":"20 September 2022","externalUrl":null,"permalink":"/categories/neovim/","section":"Categories","summary":"","title":"Neovim","type":"categories"},{"content":"","date":"20 September 2022","externalUrl":null,"permalink":"/tags/neovim/","section":"Tags","summary":"","title":"Neovim","type":"tags"},{"content":" I have been using Vim/Neovim as my primary IDE for the last 5 years and developing in Elixir for the past 2 years and a half or so. In this article, I\u0026rsquo;ll try to explain my current setup with its plugin and global configuration. I\u0026rsquo;ll also include as many tips as possible so that you can boost your productivity using this fantastic editor. This article is aimed at Neovim users but you can adapt everything to vim.\nPlugin manager # First of all, we need a plugin manager because downloading manually every time you need to use vim on a new session becomes annoying pretty quickly. I personnaly use vim-plug but Pathogen or other choices are ok too !\nI like to have my plugs separated from the rest of my config so put\nsource $HOME/.config/nvim/plug.vim at the top of your init.vim file.\nIn your plug.vim file, copy the following to install plug-vim if absent.\nlet vimplug_exists=expand(\u0026#39;~/.config/nvim/autoload/plug.vim\u0026#39;) if !filereadable(vimplug_exists) if !executable(\u0026#34;curl\u0026#34;) echoerr \u0026#34;You have to install curl or first install vim-plug yourself!\u0026#34; execute \u0026#34;q!\u0026#34; endif echo \u0026#34;Installing Vim-Plug...\u0026#34; echo \u0026#34;\u0026#34; silent exec \u0026#34;!\\curl -fLo \u0026#34; . vimplug_exists . \u0026#34; --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\u0026#34; let g:not_finish_vimplug = \u0026#34;yes\u0026#34; autocmd VimEnter * PlugInstall endif To download and use plugins, we need to add the following to plug.vim :\ncall plug#begin(\u0026#39;~/.config/nvim/plugged\u0026#39;) Plug \u0026#39;tpope/vim-fugitive\u0026#39; call plug#end() The line Plug 'tpope/vim-fugitive' is an example of a plugin you can install. You need to put the keyword Plug followed by the plugin\u0026rsquo;s github repository.\nWith this, we have the plugin manager and we can dive into the exciting parts !\nThe basics # I\u0026rsquo;ll try to not spend too much time on these but we still need to use a few basic plugins for project management and other purposes. Here is the list :\nPlug \u0026#39;tpope/vim-surround\u0026#39; Plug \u0026#39;scrooloose/nerdtree\u0026#39; Plug \u0026#39;Xuyuanp/nerdtree-git-plugin\u0026#39; Plug \u0026#39;scrooloose/nerdcommenter\u0026#39; Plug \u0026#39;tpope/vim-fugitive\u0026#39; Plug \u0026#39;jiangmiao/auto-pairs\u0026#39; Plug \u0026#39;bling/vim-airline\u0026#39; Plug \u0026#39;nathanaelkane/vim-indent-guides\u0026#39; In order, these will:\nChange the characters surrounding an object (line/word/paragraph/other) Display a file explorer of the current directory Add git functionnalities to the previous file explorer Comment/uncomment more easily Add git functionnalities such as git vertical diff to resolve merge conflicts with ease Autopairs certain non alphanumerical characters such as parenthesis, quotes, curly braces \u0026hellip; Display a status/tabline Display indent guides For the configuration, here are a few very basics config parameters :\n\u0026#34;\u0026#34; Encoding set encoding=utf-8 set fileencoding=utf-8 set fileencodings=utf-8 \u0026#34; Basic stuff let mapleader=\u0026#34;,\u0026#34; set foldmethod=indent \u0026#34;\u0026#34; Tabs. May be overridden by autocmd rules set tabstop=2 set softtabstop=0 set shiftwidth=2 set expandtab \u0026#34;\u0026#34; Fix backspace indent set backspace=indent,eol,start \u0026#34;\u0026#34; Enable hidden buffers set hidden \u0026#34;\u0026#34; Searching set nohlsearch set incsearch set ignorecase set smartcase \u0026#34; session management let g:session_directory = \u0026#34;~/.config/nvim/session\u0026#34; let g:session_autoload = \u0026#34;no\u0026#34; let g:session_autosave = \u0026#34;no\u0026#34; let g:session_command_aliases = 1 set nobackup set noswapfile set nocompatible There is a million other settings that you can tweak but for now, it will be enough !\nYou might also want to add a theme of your choice such as nord/gruvbox/dracula\u0026hellip;\nSyntax Highlighting # For syntax highlighting, I use vim-elixir so add the following in your plug.vim file:\nPlug \u0026#39;vim-editors/vim-elixir\u0026#39; It also handles automatic indentation which is always handy. You must have the following in your init.vim file for it to work properly:\nsyntax on filetype plugin indent on Snippets # Snippets are small templates for commonly used code that you can fill in on the fly. It\u0026rsquo;s surprisingly powerful and doesn\u0026rsquo;t need much configuration.\nFirst, we need a plugin to handle snippets. I like to use Ultisnips to manage them. Add to your plug.vim file:\nPlug \u0026#39;sirver/ultisnips\u0026#39; Plug \u0026#39;honza/vim-snippets\u0026#39; And to your init.vim:\n\u0026#34; Snippets let g:UltiSnipsExpandTrigger=\u0026#34;\u0026lt;c-j\u0026gt;\u0026#34; let g:UltiSnipsJumpForwardTrigger=\u0026#34;\u0026lt;c-j\u0026gt;\u0026#34; let g:UltiSnipsJumpBackwardTrigger=\u0026#34;\u0026lt;c-b\u0026gt;\u0026#34; For example, I can just type mod and press ctrl + j and it will complete it to\ndefmodule name do end with the cursor on name and name selected so I can just keep on typing to change to name of the module.\nThere is a lot of other snippets ready to be used. If you want to consult them or edit them, type :UltiSnipsEdit with an elixir file opened.\nTags and autocompletion # Tags are very powerful and helps you navigate big projects with more fluidity. Autocompletion is also a pretty basic feature for any IDE which respects itself.\nThe plugin I use is alchemist and it\u0026rsquo;s fantastic! The only downside I have with it is I can\u0026rsquo;t seem to jump to the definition of a module or function in a new tab. For your plug.vim file:\nPlug \u0026#39;slashmili/alchemist.vim\u0026#39; Plug \u0026#39;Shougo/deoplete.nvim\u0026#39;, { \u0026#39;do\u0026#39;: \u0026#39;:UpdateRemotePlugins\u0026#39; } And for your init.vim file:\n\u0026#34; Deoplete config let g:deoplete#enable_at_startup=1 call deoplete#custom#option(\u0026#39;ignore_sources\u0026#39;, {\u0026#39;_\u0026#39;: [\u0026#39;around\u0026#39;, \u0026#39;buffer\u0026#39;]}) To jump to the definition of the function/module/macro your cursor is on, just press ctrl + ]. If you want to come back to where you were before, press ctrl + t. It requires to have your project compiled whether with iex -S mix or mix phoenix.server. For autocompletion, just press ctrl + x followed by ctrl + o to open a contextual menu with the different options.\nConclusion # Vim is a very powerful editor and with only a few plugins, you can make it usable even for big projets while retaining its speed and lightweight.\nIf you want to see the rest of my configuration, head over to my dotfiles !\n","date":"20 September 2022","externalUrl":null,"permalink":"/posts/elixir_vim_setup/","section":"Posts","summary":"I have been using Vim/Neovim as my primary IDE for the last 5 years and developing in Elixir for the past 2 years and a half or so. In this article, I\u0026rsquo;ll try to explain my current setup with its plugin and global configuration. I\u0026rsquo;ll also include as many tips as possible so that you can boost your productivity using this fantastic editor.","title":"Setup Neovim for Elixir","type":"posts"},{"content":"","date":"20 September 2022","externalUrl":null,"permalink":"/tags/workflow/","section":"Tags","summary":"","title":"Workflow","type":"tags"},{"content":"","date":"13 June 2022","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"Hello, I am Charles and I am a Software Engineer working in Paris! I\u0026rsquo;m currently working at Datadog within the Alerting platform where I\u0026rsquo;m in charge of increasing the reliability of our monitor evaluations!\nI previously worked on the internal data platform used by data scientists at Owkin and on the Warehouse Management System developped by KBRW.\nAfter these experiences, I would define myself as language agnostic with some preferences, having developped professionally in Elixir, Python, Golang, Rust\u0026hellip; I try to concern myself with maintable and scalable systems, for humans and machines.\n","externalUrl":null,"permalink":"/about/","section":"Another tech blog","summary":"","title":"About me","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]