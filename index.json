[{"content":"","date":"20 September 2022","permalink":"/","section":"Another tech blog","summary":"","title":"Another tech blog"},{"content":"","date":"20 September 2022","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"20 September 2022","permalink":"/tags/elixir/","section":"Tags","summary":"","title":"Elixir"},{"content":"","date":"20 September 2022","permalink":"/categories/elixir/","section":"Categories","summary":"","title":"Elixir"},{"content":"","date":"20 September 2022","permalink":"/tags/neovim/","section":"Tags","summary":"","title":"Neovim"},{"content":"","date":"20 September 2022","permalink":"/categories/neovim/","section":"Categories","summary":"","title":"Neovim"},{"content":" I have been using Vim/Neovim as my primary IDE for the last 5 years and developing in Elixir for the past 2 years and a half or so. In this article, I\u0026rsquo;ll try to explain my current setup with its plugin and global configuration. I\u0026rsquo;ll also include as many tips as possible so that you can boost your productivity using this fantastic editor. This article is aimed at Neovim users but you can adapt everything to vim.\nPlugin manager # First of all, we need a plugin manager because downloading manually every time you need to use vim on a new session becomes annoying pretty quickly. I personnaly use vim-plug but Pathogen or other choices are ok too !\nI like to have my plugs separated from the rest of my config so put\nsource $HOME/.config/nvim/plug.vim at the top of your init.vim file.\nIn your plug.vim file, copy the following to install plug-vim if absent.\nlet vimplug_exists=expand(\u0026#39;~/.config/nvim/autoload/plug.vim\u0026#39;) if !filereadable(vimplug_exists) if !executable(\u0026#34;curl\u0026#34;) echoerr \u0026#34;You have to install curl or first install vim-plug yourself!\u0026#34; execute \u0026#34;q!\u0026#34; endif echo \u0026#34;Installing Vim-Plug...\u0026#34; echo \u0026#34;\u0026#34; silent exec \u0026#34;!\\curl -fLo \u0026#34; . vimplug_exists . \u0026#34; --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\u0026#34; let g:not_finish_vimplug = \u0026#34;yes\u0026#34; autocmd VimEnter * PlugInstall endif To download and use plugins, we need to add the following to plug.vim :\ncall plug#begin(\u0026#39;~/.config/nvim/plugged\u0026#39;) Plug \u0026#39;tpope/vim-fugitive\u0026#39; call plug#end() The line Plug 'tpope/vim-fugitive' is an example of a plugin you can install. You need to put the keyword Plug followed by the plugin\u0026rsquo;s github repository.\nWith this, we have the plugin manager and we can dive into the exciting parts !\nThe basics # I\u0026rsquo;ll try to not spend too much time on these but we still need to use a few basic plugins for project management and other purposes. Here is the list :\nPlug \u0026#39;tpope/vim-surround\u0026#39; Plug \u0026#39;scrooloose/nerdtree\u0026#39; Plug \u0026#39;Xuyuanp/nerdtree-git-plugin\u0026#39; Plug \u0026#39;scrooloose/nerdcommenter\u0026#39; Plug \u0026#39;tpope/vim-fugitive\u0026#39; Plug \u0026#39;jiangmiao/auto-pairs\u0026#39; Plug \u0026#39;bling/vim-airline\u0026#39; Plug \u0026#39;nathanaelkane/vim-indent-guides\u0026#39; In order, these will:\nChange the characters surrounding an object (line/word/paragraph/other) Display a file explorer of the current directory Add git functionnalities to the previous file explorer Comment/uncomment more easily Add git functionnalities such as git vertical diff to resolve merge conflicts with ease Autopairs certain non alphanumerical characters such as parenthesis, quotes, curly braces \u0026hellip; Display a status/tabline Display indent guides For the configuration, here are a few very basics config parameters :\n\u0026#34;\u0026#34; Encoding set encoding=utf-8 set fileencoding=utf-8 set fileencodings=utf-8 \u0026#34; Basic stuff let mapleader=\u0026#34;,\u0026#34; set foldmethod=indent \u0026#34;\u0026#34; Tabs. May be overridden by autocmd rules set tabstop=2 set softtabstop=0 set shiftwidth=2 set expandtab \u0026#34;\u0026#34; Fix backspace indent set backspace=indent,eol,start \u0026#34;\u0026#34; Enable hidden buffers set hidden \u0026#34;\u0026#34; Searching set nohlsearch set incsearch set ignorecase set smartcase \u0026#34; session management let g:session_directory = \u0026#34;~/.config/nvim/session\u0026#34; let g:session_autoload = \u0026#34;no\u0026#34; let g:session_autosave = \u0026#34;no\u0026#34; let g:session_command_aliases = 1 set nobackup set noswapfile set nocompatible There is a million other settings that you can tweak but for now, it will be enough !\nYou might also want to add a theme of your choice such as nord/gruvbox/dracula\u0026hellip;\nSyntax Highlighting # For syntax highlighting, I use vim-elixir so add the following in your plug.vim file:\nPlug \u0026#39;vim-editors/vim-elixir\u0026#39; It also handles automatic indentation which is always handy. You must have the following in your init.vim file for it to work properly:\nsyntax on filetype plugin indent on Snippets # Snippets are small templates for commonly used code that you can fill in on the fly. It\u0026rsquo;s surprisingly powerful and doesn\u0026rsquo;t need much configuration.\nFirst, we need a plugin to handle snippets. I like to use Ultisnips to manage them. Add to your plug.vim file:\nPlug \u0026#39;sirver/ultisnips\u0026#39; Plug \u0026#39;honza/vim-snippets\u0026#39; And to your init.vim:\n\u0026#34; Snippets let g:UltiSnipsExpandTrigger=\u0026#34;\u0026lt;c-j\u0026gt;\u0026#34; let g:UltiSnipsJumpForwardTrigger=\u0026#34;\u0026lt;c-j\u0026gt;\u0026#34; let g:UltiSnipsJumpBackwardTrigger=\u0026#34;\u0026lt;c-b\u0026gt;\u0026#34; For example, I can just type mod and press ctrl + j and it will complete it to\ndefmodule name do end with the cursor on name and name selected so I can just keep on typing to change to name of the module.\nThere is a lot of other snippets ready to be used. If you want to consult them or edit them, type :UltiSnipsEdit with an elixir file opened.\nTags and autocompletion # Tags are very powerful and helps you navigate big projects with more fluidity. Autocompletion is also a pretty basic feature for any IDE which respects itself.\nThe plugin I use is alchemist and it\u0026rsquo;s fantastic! The only downside I have with it is I can\u0026rsquo;t seem to jump to the definition of a module or function in a new tab. For your plug.vim file:\nPlug \u0026#39;slashmili/alchemist.vim\u0026#39; Plug \u0026#39;Shougo/deoplete.nvim\u0026#39;, { \u0026#39;do\u0026#39;: \u0026#39;:UpdateRemotePlugins\u0026#39; } And for your init.vim file:\n\u0026#34; Deoplete config let g:deoplete#enable_at_startup=1 call deoplete#custom#option(\u0026#39;ignore_sources\u0026#39;, {\u0026#39;_\u0026#39;: [\u0026#39;around\u0026#39;, \u0026#39;buffer\u0026#39;]}) To jump to the definition of the function/module/macro your cursor is on, just press ctrl + ]. If you want to come back to where you were before, press ctrl + t. It requires to have your project compiled whether with iex -S mix or mix phoenix.server. For autocompletion, just press ctrl + x followed by ctrl + o to open a contextual menu with the different options.\nConclusion # Vim is a very powerful editor and with only a few plugins, you can make it usable even for big projets while retaining its speed and lightweight.\nIf you want to see the rest of my configuration, head over to my dotfiles !\n","date":"20 September 2022","permalink":"/posts/elixir_vim_setup/","section":"Posts","summary":"I have been using Vim/Neovim as my primary IDE for the last 5 years and developing in Elixir for the past 2 years and a half or so. In this article, I\u0026rsquo;ll try to explain my current setup with its plugin and global configuration. I\u0026rsquo;ll also include as many tips as possible so that you can boost your productivity using this fantastic editor.","title":"Setup Neovim for Elixir"},{"content":"","date":"20 September 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"20 September 2022","permalink":"/tags/workflow/","section":"Tags","summary":"","title":"Workflow"},{"content":"","date":"13 June 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"Hello, I am Charles and I am a Software Engineer working in Paris! I’m currently working on WMS (Warehouse Management System) with React, Elixir and Riak as a stack. I’m quite fond of Vim, minimalistic softwares and everything surrouding terminal based apps!\n","date":"1 January 0001","permalink":"/about/","section":"Another tech blog","summary":"Hello, I am Charles and I am a Software Engineer working in Paris! I’m currently working on WMS (Warehouse Management System) with React, Elixir and Riak as a stack. I’m quite fond of Vim, minimalistic softwares and everything surrouding terminal based apps!","title":"About me"}]